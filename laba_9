#include <iostream>
#include <fstream>
#include <string>
#include <list>
#include <iterator>
#include <functional>
#include <set>

using namespace std;

namespace kekw {
	class fruit;

	class Algoritms {
	public:
		void Algoritm1();
		 void Algoritm2(std::set<fruit>::iterator begin, std::set<fruit>::iterator end);
		 set<fruit>::iterator Algoritm3(std::set<fruit>::iterator begin, std::set<fruit>::iterator end, std::set<fruit>& newSet);
		 void Print(std::set<fruit>::iterator begin, std::set<fruit>::iterator end);
	private:
		int sum(const std::string str);

		friend fruit;
	};

	class fruit {
	private:
		string fruit_name;
		int fruit_price;

	public:
		fruit() : fruit_price(0), fruit_name(" ") {

		}
		fruit(string name, int price) {
			fruit_name = name;
			fruit_price = price;
		}
		~fruit() {
		}
	public:

		void price()
		{
			cout << fruit_price;
		}

		void name()
		{
			cout << fruit_name;
		}

		string getname()
		{
			return  fruit_name;
		}

		int getprice()
		{
			return fruit_price;
		}

		void setprice()
		{
			this->fruit_price = 0;
		}



		friend bool operator >(const kekw::fruit& d1, const kekw::fruit& d2) {
			return (d1.fruit_price > d2.fruit_price);
		}

		friend bool operator <(const kekw::fruit& d1, const kekw::fruit& d2) {
			return (d1.fruit_price < d2.fruit_price);
		}

		friend ostream& operator<< (ostream& out, const fruit& point)
		{
			out << "Fruit(" << point.fruit_name << ", " << point.fruit_price << ")";

			return out;
		}

		friend Algoritms;

	};

	class Exception {
	public:
		Exception() {
			this->errorIndex = 0;
		}
		Exception(int errorIndex) {
			this->errorIndex = errorIndex;
		}
		void what() {
			if (errorIndex == 0) {
				std::cout << "Input error! Enter int!" << std::endl;
			}
			else if (errorIndex == 1) {
				std::cout << "Opening error!" << std::endl;
			}
			else if (errorIndex == 2) {
				std::cout << "Stack is empty!" << std::endl;
			}
			else {
				std::cout << "EXCEPTION, BLAT" << std::endl;
			}
		}

	private:
		int errorIndex;
	};
}

bool massCheck(int mass) {
	return (mass < 15);
}

int main() {
	kekw::Algoritms alg;
	set<kekw::fruit> test;
	set<kekw::fruit> newTest;

	test.insert(kekw::fruit("chi", 13));
	test.insert(kekw::fruit("mi", 14));
	test.insert(kekw::fruit("ge", 15));
	

	cout << "Algoritm 1\n" << "------------------------------------\n";
	alg.Algoritm1();
	cout << std::endl;

	cout << "Primary set\n" << "------------------------------------\n";
	alg.Print(test.begin(), test.end());

	cout << "Algoritm 2\n" << "------------------------------------\n";
	alg.Algoritm2(test.begin(), test.end());
	cout << std::endl;

	cout << "Algoritm 3\n" << "------------------------------------\n";
	alg.Algoritm3(test.begin(), test.end(), newTest);
	alg.Print(newTest.begin(), newTest.end());

	return 0;
}

void kekw::Algoritms::Print(set<fruit>::iterator begin, set<fruit>::iterator end)
{
	auto it = begin;
	while (it != end) {
		cout << *it << std::endl;
		++it;
	}
	std::cout << std::endl;
}

set<kekw::fruit>::iterator kekw::Algoritms::Algoritm3(set<fruit>::iterator begin, set<fruit>::iterator end, set<fruit>& newSet) {
	auto it = begin;
	set<kekw::fruit> f;
	auto it2 = f.begin();
	string name;
	int price;
	while (it != end) 
	{
		cout << "Enter name " << endl;
		cin >> name;
		cout << "Enter price " << endl;
		cin >> price;
		if ((*it).fruit_name != name)
		{
			return it;
		}
		else if ((*it).fruit_price != price)
			return it;
		++it;
	}
	return it;
}

void kekw::Algoritms::Algoritm2(set<fruit>::iterator begin, set<fruit>::iterator end) {
	int counter = 0;
	auto it = begin;
	while (it != end) 
	{
		if ((*it).fruit_price > 10)
		{
			cout << "(*it).fruit_price " << (*it).fruit_price << endl;
			++it;
		}
	}
}

void kekw::Algoritms::Algoritm1() {
	cout << "Sum numbers in file: " << endl;
	fstream outFile;
	outFile.open("string.txt");

	try {
		if (!outFile.is_open()) {
			throw 1;
		}
		cout << "Data file is opened" << endl;
	}
	catch (int index) {
		Exception ex(index);
		ex.what();
		return;
	}

	string buffer;
	list<string> strList;
	while (!outFile.eof()) {
		getline(outFile, buffer);
	}
	int suma;
	suma = sum(buffer);
	cout << "sum is " << suma << endl;
	cout << "Algoritm is ended" << std::endl;
	outFile.close();
	cout << "Data file is closed" << std::endl;

	ofstream inFile("string2.txt");

	try {
		if (!inFile.is_open()) {
			throw 1;
		}
		cout << "Result file is opened" << endl << endl;
	}
	catch (int index) {
		Exception ex(index);
		ex.what();
		return;
	}

	list<string>::const_iterator it = strList.begin();
	while (it != strList.end()) {
		inFile << *it << "\n";
		cout << *it << std::endl;
		++it;
	}
	cout << endl << "Data was writen" << endl;
	inFile.close();
	cout << "Result file is closed" << endl;
}

int kekw::Algoritms::sum(const string str)
{
	int sum, fullsum;
	sum = 0; fullsum = 0;
	for (int i = 0; i < str.size(); i++)
	{
		if ((int(str[i]) > 48) && (int(str[i])) < 57)
		{
			sum = sum * 10 + int(str[i] - 48);
		}
		else if (str[i] == ' ' || str[i] == '\n')
		{
			fullsum = fullsum + sum;
			sum = 0;
		}
		else sum = 0;
	}
	fullsum = fullsum + sum;
	return fullsum;
} // подсчёт числа в строке
